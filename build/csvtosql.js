var O=Object.create;var a=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var A=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var I=e=>a(e,"__esModule",{value:!0});var X=typeof require!="undefined"?require:e=>{throw new Error('Dynamic require of "'+e+'" is not supported')};var y=(e,i,n)=>{if(i&&typeof i=="object"||typeof i=="function")for(let r of S(i))!D.call(e,r)&&r!=="default"&&a(e,r,{get:()=>i[r],enumerable:!(n=x(i,r))||n.enumerable});return e},c=e=>y(I(a(e!=null?O(A(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var d=c(require("fs/promises")),o=c(require("fs")),h=c(require("split2")),f=c(require("events")),u=new f.default.EventEmitter;(()=>{let e={_init:new Date,args:process.argv};u.on("start",()=>console.log("stating engine")),N.call(e),u.emit("start",e)})();async function N(){let{args:e}=this,i=()=>process.stdout.write(` 
Please provide a path to the file you want to convert!
Usage:
  	--source | -s [dir] select the source file or directory
  	--help | -h [dir] get help
  	--version | -v [dir] get the current version
  	`);e.length<3&&(i(),process.exit(1)),e.find(s=>s==="--help"||s==="-h")&&(i(),process.exit(0)),e.find(s=>s==="--version"||s==="-v")&&(process.stdout.write("v1.0.0 - csvtosql"),process.exit(0)),e.find(s=>s==="--source"||s==="-s")&&(e[e.indexOf("--source")+1]===void 0||e[e.indexOf("-s")+1]===void 0?process.stdout.write(`
	 --source | -s [dir] select the source file or directory
	 `):e[e.indexOf("-s")+1].endsWith(".csv")&&(this.source=e[e.indexOf("-s")+1],console.log(`source ${this.source}`))),await(0,d.access)(this.source,o.constants.R_OK|o.constants.W_OK).catch(s=>{throw new Error(`${this.source} is not readable or writable`)});let n=0,r=/^[^\s@]+@[^\s@]+\.[^\s@]+$/,m=/^[0-9]+$/,$=/^\d{4}-\d{2}-\d{2}$/,p=/^\d{2}:\d{2}:\d{2}$/,T=/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/,l=/^(true|false)$/,g=/^[^\s]+$/,E=/^$/;(0,o.createReadStream)(this.source).pipe((0,h.default)()).on("data",s=>{n++,n===1&&(this.headers=s.split(",").map(t=>t.match(/^[0-9]+$/)?`${t} INT`:t.match(/^[0-9]+\.[0-9]+$/)?`${t} FLOAT`:t.match(r)?`${t} TEXT`:t.match(m)?`${t} INT`:t.match($)?`${t} DATE`:t.match(p)?`${t} TIME`:t.match(T)?`${t} DATETIME`:t.match(l)?`${t} BOOLEAN`:t.match(g)?`${t} TEXT`:t.match(E)?`${t} TEXT`:`${t} TEXT`))}).on("end",()=>{console.log(`File processed ${this.source}`),console.log(`${this.headers.length} headers found`),console.log(`${n} lines processed`),console.log(`${new Date().getTime()-this._init.getTime()} ms elapsed`),v()});let v=()=>{let t=`CREATE TABLE IF NOT EXISTS HUHHH (${`${this.headers.map(w=>`${w}`)}`})`;return console.log(t),t}}
//# sourceMappingURL=csvtosql.js.map
